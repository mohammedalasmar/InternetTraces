# @Mohammed Alasmar
import glob, os
os.chdir("/Users/mohammedalasmar/Desktop/codess/apply-power-law/step-2-python/")

import csv
import sys
import matplotlib.pyplot as plt
import powerlaw
import scipy.io



   
print ("starting ..")

#print(likelihoodRatioCSV)
#j=0    
#for j in range(len(allMatFiles)):
#    print(allMatFiles[j])
#    j=j+1
    
#mat = scipy.io.loadmat('../traces/blockouts.mat')
#mat = scipy.io.loadmat('../traces/cities.mat')
#mat = scipy.io.loadmat('../traces/words.mat')
#mat = scipy.io.loadmat('../traces/201612251400.mat')
#import plpva
#plpva.plpva(data,fit.power_law.xmin) 

#matDirectory= "../traces/"
#ResultsDir="../traces/"
# the directory of the mat files that are generated by matlab (they include the data rate values of each trace which we need here)


##############################################################################
#matDirectory= "../MatlabNew/allIspdslMat/ispdsl1000msec/"   
#matDirectory= "../MatlabNew/allWaikatoMat/waikato1000msec/"   
#matDirectory= "../MatlabNew/allAucklandMat/auckland1000msec/"   
#matDirectory= "../MatlabNew/allTwenteMat/twente25msec/"
#matDirectory= "../MatlabNew/allCaidaMat/caida10msec/"
#matDirectory= "../MatlabNew/allMawiMat/mawi1000msec/"

matDirectory= "../step-1-matlab/testOne/"


numTraces= 24

#ResultsDir="../pythonResults/ispdsl/ispdsl1000msecLRtest/"
#ResultsDir="../pythonResults/waikato/waikato1000msecLRtest/"
#ResultsDir="../pythonResults/auckland/auckland1000msecLRtest/"
#ResultsDir="../pythonResults/twente/twente25msecLRtest/"
#ResultsDir="../pythonResults/caida/caida10msecLRtest/"
#ResultsDir="../pythonResults/mawi/mawi1000msecLRtest/"


ResultsDir= "testOneRes/"

##############################################################################

# get all .mat files
allMatNames= ''.join([ matDirectory , "*.mat"] )
allMatFiles = ["" for x in range(numTraces)] 
i=0
for FileName in glob.glob(allMatNames):
    allMatFiles[i]=FileName
    print (i+1 )
    print (allMatFiles[i], "\n")
    i=i+1
 
ind=0   
traceIndex=1    
for ind in range(numTraces):
    
    # names of the output figures    
    head, tail = os.path.split(allMatFiles[ind])
    os.path.splitext(tail)    
    currentMatFileName = os.path.splitext(tail)[0]
    print( currentMatFileName)  
 
    ResultsDirectory= ''.join([ ResultsDir , currentMatFileName] )
    
    pdfLognormal= ''.join([ResultsDirectory, '-lognormalPDF' ])
    cdfLognormal= ''.join([ResultsDirectory, '-lognormalCDF' ])
    ccdfLognormal= ''.join([ResultsDirectory, '-lognormaCCDF' ])
    
    pdfExponential= ''.join([ResultsDirectory, '-exponentialPDF' ])
    cdfExponential= ''.join([ResultsDirectory, '-exponentialCDF' ])
    ccdExponential= ''.join([ResultsDirectory, '-lexponentialCCDF' ])
    
    pdfWeibull= ''.join([ResultsDirectory, '-weibullPDF' ])
    cdfWeibull= ''.join([ResultsDirectory, '-weibullCDF' ])
    ccdfWeibull= ''.join([ResultsDirectory, '-weibullCCDF' ])
    
    pdfCutoffPl= ''.join([ResultsDirectory, '-cutoffPlPDF' ])
    cdfCutoffPl= ''.join([ResultsDirectory, '-cutoffPlCDF' ])
    ccdfCutoffPl= ''.join([ResultsDirectory, '-cutoffPlCCDF' ])
    
    likelihoodRatioCSV= ''.join([ResultsDirectory, '-likelihood-ratio.csv' ])
    
    #x1 = currentMatFileName[:-4]
    #x1 = currentMatFileName 
    x1= ''.join(['data_rate_',currentMatFileName ])

    
    mat = scipy.io.loadmat(allMatFiles[ind])
    x = mat[x1]
    data=x[0]
    print (data)
    
    ind=ind+1
    
    matResCsv= ''.join(['data_rate_',currentMatFileName])
 
    csvFileDirectoryTemp= ''.join([ matDirectory , matResCsv ] ) 
    csvFileDirectory= ''.join([ csvFileDirectoryTemp , "Results.csv" ] ) 
    

    mycsv = csv.reader(open(csvFileDirectory))
    for row in mycsv:
        xminMatVlue = row[6]
        print(xminMatVlue)   
    
    
    

    fit = powerlaw.Fit(data, xmin= xminMatVlue)
    print ("xmin = " ,fit.power_law.xmin)
    print ("alpha = ", fit.power_law.alpha , "\n\n")
    #print ("sigma",fit.power_law.sigma)
    #print ("sigma",fit.power_law.sigma_threshold)
    
    ######################################## stretched_exponential exponential lognormal power_law
    ###########  lognormal ################# 
    ########################################
    R_lognormal, p_lognormal = fit.distribution_compare('power_law', 'lognormal', normalized_ratio=True) 
    print ("lognormal: (LR , p) = (", R_lognormal,p_lognormal ,")\n\n")
    from numpy import log
    log(10)
    plt.figure(0)
    fig= fit.plot_pdf(color='b', linestyle='--')
    fit.power_law.plot_pdf(ax=fig,color='r', linestyle='-.')
    fit.lognormal.plot_pdf(ax=fig,color='g', linestyle=':')
    plt.xlabel('data rate (bps)') 
    plt.ylabel('PDF') 
    plt.legend(['trace','power law', 'lognormal']) 
    plt.savefig(pdfLognormal)
    plt.clf()  
    plt.gca().cla()
    
    plt.figure(1)
    fig= fit.plot_cdf(color='b', linestyle='--')
    fit.power_law.plot_cdf(ax=fig,color='r', linestyle='-.')
    fit.lognormal.plot_cdf(ax=fig,color='g', linestyle=':')
    plt.xlabel('data rate (bps)') 
    plt.ylabel('CDF') 
    plt.legend(['trace','power law', 'lognormal']) 
    plt.savefig(cdfLognormal)
    plt.clf()  
    plt.gca().cla()
    
    plt.figure(2)
    fig= fit.plot_ccdf(color='b', linestyle='--')
    fit.power_law.plot_ccdf(ax=fig,color='r', linestyle='-.')
    fit.lognormal.plot_ccdf(ax=fig,color='g', linestyle=':')
    plt.xlabel('data rate (bps)') 
    plt.ylabel('CCDF') 
    plt.legend(['trace','power law', 'lognormal']) 
    plt.savefig(ccdfLognormal)
    plt.clf()  
    plt.gca().cla()
    
    
    ########################################
    ###########  exponential ###############
    ########################################
    R_exponential, p_exponential = fit.distribution_compare('power_law', 'exponential', normalized_ratio=True) 
    print ("exponential: (LR , p) = (", R_exponential,p_exponential ,")\n\n")
    plt.figure(3)
    fig= fit.plot_pdf(color='b', linestyle='--')
    fit.power_law.plot_pdf(ax=fig,color='r', linestyle='-.')
    fit.exponential.plot_pdf(ax=fig,color='g', linestyle=':')
    plt.xlabel('data rate (bps)') 
    plt.ylabel('PDF') 
    plt.legend(['trace','power law', 'exponential']) 
    plt.savefig(pdfExponential)
    plt.clf()  
    plt.gca().cla()
    
    plt.figure(4)
    fig= fit.plot_cdf(color='b', linestyle='--')
    fit.power_law.plot_cdf(ax=fig,color='r', linestyle='-.')
    fit.exponential.plot_cdf(ax=fig,color='g', linestyle=':')
    plt.xlabel('data rate (bps)') 
    plt.ylabel('CDF') 
    plt.legend(['trace','power law', 'exponential']) 
    plt.savefig(cdfExponential)
    plt.clf()  
    plt.gca().cla()
    
    plt.figure(5)
    fig= fit.plot_ccdf(color='b', linestyle='--')
    fit.power_law.plot_ccdf(ax=fig,color='r', linestyle='-.')
    fit.exponential.plot_ccdf(ax=fig,color='g', linestyle=':')
    plt.xlabel('data rate (bps)') 
    plt.ylabel('CCDF') 
    plt.legend(['trace','power law', 'exponential']) 
    plt.savefig(ccdExponential) 
    plt.clf()  
    plt.gca().cla()
    ########################################
    ###########  Weibull ###################
    ########################################
     
    
    R_Weibull, p_Weibull = fit.distribution_compare('exponential', 'lognormal',  normalized_ratio=True) 
    print ("Weibull: (LR , p) = (", R_Weibull,p_Weibull ,")\n\n")
    
    plt.figure(6)
    fig= fit.plot_pdf(color='b', linestyle='--')
    fit.power_law.plot_pdf(ax=fig,color='r', linestyle='-.')
    fit.stretched_exponential.plot_pdf(ax=fig,color='g', linestyle=':')
    plt.xlabel('data rate (bps)') 
    plt.ylabel('PDF') 
    plt.legend(['trace','power law', 'Weibull']) 
    plt.savefig(pdfWeibull)
    plt.clf()  
    plt.gca().cla()
    
    plt.figure(7)
    fig= fit.plot_cdf(color='b', linestyle='--')
    fit.power_law.plot_cdf(ax=fig,color='r', linestyle='-.')
    fit.stretched_exponential.plot_cdf(ax=fig,color='g', linestyle=':')
    plt.xlabel('data rate (bps)') 
    plt.ylabel('CDF') 
    plt.legend(['trace','power law', 'Weibull']) 
    plt.savefig(cdfWeibull)
    plt.clf()  
    plt.gca().cla()
    
    plt.figure(8)
    fig= fit.plot_ccdf(color='b', linestyle='--')
    fit.power_law.plot_ccdf(ax=fig,color='r', linestyle='-.')
    fit.stretched_exponential.plot_ccdf(ax=fig,color='g', linestyle=':')
    plt.xlabel('data rate (bps)') 
    plt.ylabel('CCDF') 
    plt.legend(['trace','power law', 'Weibull']) 
    plt.savefig(ccdfWeibull)
    plt.clf()  
    plt.gca().cla()
       
    ########################################
    ###########  truncated_power_law #######
    ########################################
    
    R_cutoffPl, p_cutoffPl = fit.nested_distribution_compare('power_law', 'lognormal', normalized_ratio=True)
    print ("truncated_power_law: (LR , p) = (", R_cutoffPl,p_cutoffPl ,")\n\n")
    
    
    plt.figure(9)
    fig= fit.plot_pdf(color='b', linestyle='--')
    fit.power_law.plot_pdf(ax=fig,color='r', linestyle='-.')
    fit.truncated_power_law.plot_pdf(ax=fig,color='g', linestyle=':')
    plt.xlabel('data rate (bps)') 
    plt.ylabel('PDF') 
    plt.legend(['trace','power law', 'truncated_power_law']) 
    plt.savefig(pdfCutoffPl)
    plt.clf()  
    plt.gca().cla()
    
    plt.figure(10)
    fig= fit.plot_cdf(color='b', linestyle='--')
    fit.power_law.plot_cdf(ax=fig,color='r', linestyle='-.')
    fit.truncated_power_law.plot_cdf(ax=fig,color='g', linestyle=':')
    plt.xlabel('data rate (bps)') 
    plt.ylabel('CDF') 
    plt.legend(['trace','power law', 'truncated_power_law']) 
    plt.savefig(cdfCutoffPl)
    plt.clf()  
    plt.gca().cla()
    
    plt.figure(11)
    fig= fit.plot_ccdf(color='b', linestyle='--')
    fit.power_law.plot_ccdf(ax=fig,color='r', linestyle='-.')
    fit.truncated_power_law.plot_ccdf(ax=fig,color='g', linestyle=':')
    plt.xlabel('data rate (bps)') 
    plt.ylabel('CCDF') 
    plt.legend(['trace','power law', 'truncated_power_law']) 
    plt.savefig(ccdfCutoffPl)
    plt.clf()  
    plt.gca().cla()    
     
       
    
    csvrow1 = [' ' , ' ' , ' ' , ' lognormal' , 'lognormal' , 'exponential', 'exponential' , 'Weibull','Weibull' , 'truncated power law' ,'truncated power law'  ]
    csvrow2 = [' trace name ' , 'xmin ' , 'alpha ' , ' LR' , 'p' , 'LR', 'p' , 'LR','p' , 'LR' ,'p'  ]
    csvrow3 = [currentMatFileName , str(fit.power_law.xmin) , str(fit.power_law.alpha)  , str(R_lognormal) , str(p_lognormal) , str(R_exponential), str(p_exponential) , str(R_Weibull) ,str(p_Weibull) , str(R_cutoffPl) , str(p_cutoffPl)  ]
   # csvrow3 = [ str(traceIndex) , str(fit.power_law.xmin) , str(fit.power_law.alpha)  , str(R_lognormal) , str(p_lognormal) , str(R_exponential), str(p_exponential) , str(R_Weibull) ,str(p_Weibull) , str(R_cutoffPl) , str(p_cutoffPl)  ]
    
    traceIndex=traceIndex+1
    myData=[ csvrow1 , csvrow2 , csvrow3]
    
    myFile = open(likelihoodRatioCSV, 'w')  
    with myFile:  
       writer = csv.writer(myFile)
       writer.writerows(myData)
       
